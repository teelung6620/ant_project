import 'dart:convert';

import 'package:ant_project/src/features/user/profile/domain/entity/profile_entity_test.dart';

GetProfileModel userListFromJson(String str) =>
    GetProfileModel.fromJson(json.decode(str));

String userListToJson(GetProfileModel data) => json.encode(data.toJson());

class GetProfileModel extends ProfileEntityTest {
  const GetProfileModel({
    required super.idEmployees,
    required super.employeeId,
    required super.titleTh,
    required super.firstnameTh,
    required super.lastnameTh,
    required super.nicknameTh,
    required super.titleEn,
    required super.hiringDate,
    required super.personalId,
    required super.email,
    required super.telephoneMobile,
    required super.positionName,
    required super.sectionName,
    required super.departmentName,
    required super.divisionName,
    required super.address,
    required super.houseNo,
    required super.village,
    required super.villageNo,
    required super.alley,
    required super.road,
    required super.subDistrict,
    required super.district,
    required super.provience,
    required super.areaCode,
    required super.companyName,
    required super.firstnameEn,
    required super.lastnameEn,
    required super.nicknameEn,
    required super.idRole,
    required super.isActive,
    required super.createDate,
    required super.createBy,
    required super.idManagerLv1,
    required super.idManagerLv2,
    required super.idPaymentType,
    required super.idCompany,
    required super.imageName,
    required super.servY,
    required super.servM,
    required super.userPf,
    required super.taxId,
    required super.maritalStatus,
    required super.uniwelfareFlexcoins,
    required super.managerLv1FirstnameTh,
    required super.managerLv1LastnameTh,
    required super.managerLv1FirstnameEn,
    required super.managerLv1LastnameEn,
    required super.managerLv1Email,
    required super.managerLv2FirstnameTh,
    required super.managerLv2LastnameTh,
    required super.managerLv2FirstnameEn,
    required super.managerLv2LastnameEn,
    required super.managerLv2Email,
    required super.emergencyContact,
    required super.emergencyRelationship,
    required super.emergencyPhone,
    required super.birthday,
    required super.workingType,
    required super.updateDate,
    required super.updateBy,
    required super.roleName,
    required super.roles,
    required super.educations,
    required super.imageProfile,
  });
  factory GetProfileModel.fromJson(Map<String, dynamic> json) =>
      GetProfileModel(
        idEmployees: json["idEmployees"],
        employeeId: json["employeeID"],
        titleTh: json["title_TH"],
        firstnameTh: json["firstname_TH"],
        lastnameTh: json["lastname_TH"],
        nicknameTh: json["nickname_TH"],
        titleEn: json["title_EN"],
        hiringDate: json["hiringDate"] == null
            ? null
            : DateTime.parse(json["hiringDate"]),
        personalId: json["personalID"],
        email: json["email"],
        telephoneMobile: json["telephoneMobile"],
        positionName: json["positionName"],
        sectionName: json["sectionName"],
        departmentName: json["departmentName"],
        divisionName: json["divisionName"],
        address: json["address"],
        houseNo: json["houseNo"],
        village: json["village"],
        villageNo: json["villageNo"],
        alley: json["alley"],
        road: json["road"],
        subDistrict: json["subDistrict"],
        district: json["district"],
        provience: json["provience"],
        areaCode: json["areaCode"],
        companyName: json["companyName"],
        firstnameEn: json["firstname_EN"],
        lastnameEn: json["lastname_EN"],
        nicknameEn: json["nickname_EN"],
        idRole: json["idRole"],
        isActive: json["isActive"],
        createDate: json["createDate"],
        createBy: json["createBy"],
        idManagerLv1: json["idManagerLV1"],
        idManagerLv2: json["idManagerLV2"],
        idPaymentType: json["idPaymentType"],
        idCompany: json["idCompany"],
        imageName: json["imageName"],
        servY: json["Serv_Y"],
        servM: json["Serv_M"],
        userPf: json["userPF"],
        taxId: json["taxID"],
        maritalStatus: json["maritalStatus"],
        uniwelfareFlexcoins: json["uniwelfare_flexcoins"],
        managerLv1FirstnameTh: json["managerLV1_firstname_TH"],
        managerLv1LastnameTh: json["managerLV1_lastname_TH"],
        managerLv1FirstnameEn: json["managerLV1_firstname_EN"],
        managerLv1LastnameEn: json["managerLV1_lastname_EN"],
        managerLv1Email: json["managerLV1_email"],
        managerLv2FirstnameTh: json["managerLV2_firstname_TH"],
        managerLv2LastnameTh: json["managerLV2_lastname_TH"],
        managerLv2FirstnameEn: json["managerLV2_firstname_EN"],
        managerLv2LastnameEn: json["managerLV2_lastname_EN"],
        managerLv2Email: json["managerLV2_email"],
        emergencyContact: json["emergencyContact"],
        emergencyRelationship: json["emergencyRelationship"],
        emergencyPhone: json["emergencyPhone"],
        birthday:
            json["birthday"] == null ? null : DateTime.parse(json["birthday"]),
        workingType: json["workingType"],
        updateDate: json["updateDate"] == null
            ? null
            : DateTime.parse(json["updateDate"]),
        updateBy: json["updateBy"],
        roleName: json["roleName"],
        roles: json["roles"] == null
            ? []
            : List<String>.from(json["roles"]!.map((x) => x)),
        educations: json["educations"] == null
            ? []
            : List<Education>.from(
                json["educations"]!.map((x) => EducationModel.fromJson(x))),
        imageProfile: json["imageProfile"],
      );

  Map<String, dynamic> toJson() => {
        "idEmployees": idEmployees,
        "employeeID": employeeId,
        "title_TH": titleTh,
        "firstname_TH": firstnameTh,
        "lastname_TH": lastnameTh,
        "nickname_TH": nicknameTh,
        "title_EN": titleEn,
        "hiringDate": hiringDate?.toIso8601String(),
        "personalID": personalId,
        "email": email,
        "telephoneMobile": telephoneMobile,
        "positionName": positionName,
        "sectionName": sectionName,
        "departmentName": departmentName,
        "divisionName": divisionName,
        "address": address,
        "houseNo": houseNo,
        "village": village,
        "villageNo": villageNo,
        "alley": alley,
        "road": road,
        "subDistrict": subDistrict,
        "district": district,
        "provience": provience,
        "areaCode": areaCode,
        "companyName": companyName,
        "firstname_EN": firstnameEn,
        "lastname_EN": lastnameEn,
        "nickname_EN": nicknameEn,
        "idRole": idRole,
        "isActive": isActive,
        "createDate": createDate,
        "createBy": createBy,
        "idManagerLV1": idManagerLv1,
        "idManagerLV2": idManagerLv2,
        "idPaymentType": idPaymentType,
        "idCompany": idCompany,
        "imageName": imageName,
        "Serv_Y": servY,
        "Serv_M": servM,
        "userPF": userPf,
        "taxID": taxId,
        "maritalStatus": maritalStatus,
        "uniwelfare_flexcoins": uniwelfareFlexcoins,
        "managerLV1_firstname_TH": managerLv1FirstnameTh,
        "managerLV1_lastname_TH": managerLv1LastnameTh,
        "managerLV1_firstname_EN": managerLv1FirstnameEn,
        "managerLV1_lastname_EN": managerLv1LastnameEn,
        "managerLV1_email": managerLv1Email,
        "managerLV2_firstname_TH": managerLv2FirstnameTh,
        "managerLV2_lastname_TH": managerLv2LastnameTh,
        "managerLV2_firstname_EN": managerLv2FirstnameEn,
        "managerLV2_lastname_EN": managerLv2LastnameEn,
        "managerLV2_email": managerLv2Email,
        "emergencyContact": emergencyContact,
        "emergencyRelationship": emergencyRelationship,
        "emergencyPhone": emergencyPhone,
        "birthday": birthday?.toIso8601String(),
        "workingType": workingType,
        "updateDate": updateDate?.toIso8601String(),
        "updateBy": updateBy,
        "roleName": roleName,
        "roles": roles == null ? [] : List<dynamic>.from(roles!.map((x) => x)),
        "educations": educations == null
            ? []
            : List<dynamic>.from(educations!.map((x) => x.toJson())),
        "imageProfile": imageProfile,
      };
}

class EducationModel extends Education {
  EducationModel({
    required super.idEducations,
    required super.degree,
    required super.university,
    required super.faculty,
    required super.major,
    required super.fromYear,
    required super.endYear,
    required super.gpa,
    required super.idEmployees,
  });
  factory EducationModel.fromJson(Map<String, dynamic> json) => EducationModel(
        idEducations: json["idEducations"],
        degree: json["degree"],
        university: json["university"],
        faculty: json["faculty"],
        major: json["major"],
        fromYear: json["fromYear"],
        endYear: json["endYear"],
        gpa: json["gpa"],
        idEmployees: json["idEmployees"],
      );

  Map<String, dynamic> toJson() => {
        "idEducations": idEducations,
        "degree": degree,
        "university": university,
        "faculty": faculty,
        "major": major,
        "fromYear": fromYear,
        "endYear": endYear,
        "gpa": gpa,
        "idEmployees": idEmployees,
      };
}
